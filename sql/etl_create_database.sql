-- ### CREATE SCHEMA SCRIPTS FOR HLL DATAWAREHOUSE

-- MySQL Script generated by MySQL Workbench
-- Tue Oct 24 17:35:31 2023
-- Model: Datawarehouse501es    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- SET DESIRED SCHEMA NAME (default = hlldw)
SET @schemaName='hlldw';

-- -----------------------------------------------------
-- Schema hlldw
-- -----------------------------------------------------
SET @strSQL=CONCAT('CREATE SCHEMA IF NOT EXISTS ', @schemaName, ' DEFAULT CHARACTER SET utf8mb4 COLLATE uca1400_as_cs;');
PREPARE S1 FROM @strSQL;
EXECUTE S1;

SET @strSQL=CONCAT('USE ',@schemaName);
PREPARE S1 FROM @strSQL;
EXECUTE S1;

-- ****************************************************************************************************************************************************************************
-- STATIC DATA TABLES

-- -----------------------------------------------------
-- Table `Map`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Map` (
  `MapID` TINYINT(1) UNSIGNED NOT NULL COMMENT 'Map identifier for this DB',
  `MapName` VARCHAR(50) NOT NULL COMMENT 'Map place in English / local',
  `MapKey` VARCHAR(50) NOT NULL COMMENT 'HLL RCON Map key name',
  `MapDesc` VARCHAR(100) NOT NULL COMMENT 'Map description',
  PRIMARY KEY (`MapID`))
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `MatchType`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `MatchType` (
  `MatchType` TINYINT UNSIGNED NOT NULL COMMENT 'Match type: 0 = Casual; 1 = Friendly; 2 = Competitive',
  `MatchTypeDesc` VARCHAR(45) NOT NULL COMMENT 'Description of match type: 0 = Casual; 1 = Friendly; 2 = Competitive',
  PRIMARY KEY (`MatchType`),
  UNIQUE INDEX `ix_MatchType_UNIQUE` (`MatchType` ASC),
  UNIQUE INDEX `ix_MatchTypeDesc_UNIQUE` (`MatchTypeDesc` ASC))
ENGINE = InnoDB

-- -----------------------------------------------------
-- Table `Community`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Community` (
  `CMID` INT NOT NULL COMMENT 'Game Community internal database ID',
  `CommunityName` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`CMID`),
  UNIQUE INDEX `CMID_UNIQUE` (`CMID` ASC) VISIBLE,
  UNIQUE INDEX `CommunityName_UNIQUE` (`CommunityName` ASC) VISIBLE)
ENGINE = INNODB;


-- -----------------------------------------------------
-- Table `Competition`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Competition` (
  `CompetitionID` INT UNSIGNED NOT NULL COMMENT '1 record = 1 competition edition (i.e. HLL Seasonal Sprint 2024)',
  `CompetitionName` VARCHAR(100) NOT NULL COMMENT 'Competition Phase Name, i.e. HCA-2022 week 5',
  `CompetitionOrga` VARCHAR(50) NOT NULL COMMENT 'Competition orga (i.e. HLL Seasonal / ECL / HCA)',
  PRIMARY KEY (`CompetitionID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Clan`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Clan` (
  `ClanID` SMALLINT UNSIGNED NOT NULL,
  `ClanName` VARCHAR(100) NOT NULL,
  `Country` VARCHAR(50) NULL,
  `LastHeloRank` SMALLINT UNSIGNED NULL,
  `ClanAcro` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`ClanID`))
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `ClanTag`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ClanTag` (
  `ClanTag` VARCHAR(15) NOT NULL COMMENT 'Clan tag must be unique. If collision between two or more clans, use aditional prefix/sufix to made unique (country, region, continent, etc)',
  `ClanID` SMALLINT UNSIGNED NOT NULL,
  PRIMARY KEY (`ClanTag`),
  INDEX `fkClanTag_Clan_ClanID_idx` (`ClanID` ASC),
  CONSTRAINT `fkClanTag_Clan_ClanID`
    FOREIGN KEY (`ClanID`)
    REFERENCES `Clan` (`ClanID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `Weapon`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Weapon` (
  `WeaponID` INT UNSIGNED NOT NULL,
  `Weapon` VARCHAR(500) NULL,
  `Category1` VARCHAR(50) NOT NULL,
  `Category2` VARCHAR(50) NOT NULL,
  `Category3` VARCHAR(50) NOT NULL,
  `Side1` VARCHAR(50) NOT NULL,
  `Side2` VARCHAR(50) NOT NULL,
  `Model` VARCHAR(50) NULL,
  `WeaponFull` VARCHAR(80) NULL,
  `Side` TINYINT NULL,
  PRIMARY KEY (`WeaponID`),
  UNIQUE INDEX `Weapon_UNIQUE` (`Weapon` ASC))
ENGINE = InnoDB;

-- ****************************************************************************************************************************************************************************
-- VAR DATA TABLES

-- -----------------------------------------------------
-- Table `GameMatch`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GameMatch` (
  `MatchID` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Internal database match ID / Identificador Ãºnico en la base de datos de este partido',
  `CMID` INT UNSIGNED NOT NULL COMMENT 'Community/Clan database ID that hosted this match (see Community table)',
  `RCONMatchID` INT UNSIGNED NOT NULL COMMENT 'Field \"result\".\"id\" from match JSON stats (unique to RCON database)',
  `MatchName` VARCHAR(45) NULL COMMENT 'Match name (Comp+Teams)',
  `MatchDesc` VARCHAR(150) NULL COMMENT 'Match description',
  `ClansCoAllies` VARCHAR(50) NULL COMMENT 'Coalition of clans in allies side',
  `ClansCoAxis` VARCHAR(50) NULL COMMENT 'Coalition of clans in axis side',
  `StartTime` DATETIME NULL COMMENT 'Match start datetime (year, month, day, hh, mm, ss)',
  `EndTime` DATETIME NULL,
  `DurationSec` INT UNSIGNED NULL COMMENT 'Match duration in seconds',
  `RCONMapName` VARCHAR(50) NULL,
  `RCONServerNumber` VARCHAR(5) NULL,
  `StatsUrl` VARCHAR(2048) NULL COMMENT 'URL of match stats webpage',
  `JSONStatsURL` VARCHAR(2048) NULL,
  `GameServerName` VARCHAR(255) NULL COMMENT 'HLL Server name',
  `GameServerIP` VARCHAR(15) NULL COMMENT 'HLL Server IP',
  `GameServerOwner` VARCHAR(100) NULL COMMENT 'HLL game server owner (i.e clan name, community, etc)',
  `MapID` TINYINT(1) UNSIGNED NOT NULL COMMENT 'Map ID (see Map table)',
  `ResultAllies` TINYINT(1) UNSIGNED NULL COMMENT 'Match result for Allies team: 0-5',
  `ResultAxis` TINYINT(1) UNSIGNED NULL COMMENT 'Match result for Axis team: 0-5',
  `MatchType` TINYINT(1) UNSIGNED NOT NULL COMMENT '0 = Casual; 1 = Friendly/Amistoso; 2 = Competitive/Competitivo',
  `CompetitionID` INT UNSIGNED NULL DEFAULT 0 COMMENT 'Competition Phase ID (0 = casual)',
  PRIMARY KEY (`MatchID`),
  INDEX `fkGameMatch_Map_idx` (`MapID` ASC) VISIBLE,
  INDEX `fkGameMatch_Competition_idx` (`CompetitionID` ASC) VISIBLE,
  CONSTRAINT `fkGameMatch_MapID`
    FOREIGN KEY (`MapID`)
    REFERENCES `Map` (`MapID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `fkGameMatch_CompetitionID`
    FOREIGN KEY (`CompetitionID`)
    REFERENCES `Competition` (`CompetitionID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = INNODB;

create INDEX `ix_gamematch_sqlInsertMatch` USING HASH ON `GameMatch` (`CMID`,`RCONMatchID`,`StartTime`,`EndTime`);


-- -----------------------------------------------------
-- Table `ClansInMatch`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ClansInMatch` (
  `MatchID` INT UNSIGNED NOT NULL,
  `ClanID` SMALLINT UNSIGNED NOT NULL,
  `Side` TINYINT(1) UNSIGNED NOT NULL COMMENT '1 Allies; 2 Axis / One clan can play the match balanced between the two sides',
  INDEX `fkClansInMatch_GameMatch_idx` (`MatchID` ASC),
  INDEX `fkClansInMatch_Clans_idx` (`ClanID` ASC),
  PRIMARY KEY (`MatchID`, `ClanID`, `Side`),
  CONSTRAINT `fkClansInMatch_MatchID`
    FOREIGN KEY (`MatchID`)
    REFERENCES `GameMatch` (`MatchID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `fkClansInMatch_ClanID`
    FOREIGN KEY (`ClanID`)
    REFERENCES `Clan` (`ClanID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Player`
-- -----------------------------------------------------
CREATE TABLE `player` (
	`DWPlayerID` VARCHAR(30) NOT NULL COMMENT 'Database internal player ID',
	`SteamID` VARCHAR(30) NOT NULL,
	`Rank` SMALLINT(5) UNSIGNED NOT NULL DEFAULT '0',
	PRIMARY KEY (`DWPlayerID`) USING BTREE
)
ENGINE=InnoDB;

create INDEX `ix_Player_SteamID` USING HASH ON `player` (`SteamID`);

-- -----------------------------------------------------
-- Table `PlayerStats`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `PlayerStats` (
  `CMID` INT NOT NULL COMMENT 'Community/Clan database ID (see Community table)',
  `MatchID` INT UNSIGNED NOT NULL COMMENT 'DB Match ID',
  `Player` VARCHAR(50) NOT NULL COMMENT 'Player\'s game nick (Steam Nick) as shown in HLL C-RCON stats',
  `DWPlayerID` VARCHAR(30) NOT NULL COMMENT 'Database internal Player ID',
  `RCONPlayerID` INT UNSIGNED NULL COMMENT 'RCON Stats JSON \"player_id\"',
  `SteamID` VARCHAR(30) NULL COMMENT 'Player\'s Steam ID64 (not always available)',
  `Kills` SMALLINT NOT NULL COMMENT 'Enemy kills made by player',
  `Deaths` SMALLINT NOT NULL COMMENT 'Player deaths in that match excluded redeploy deaths as that is not logged by HLL C-RCON)',
  `TKs` SMALLINT NULL COMMENT 'Team kills made by player',
  `KD` FLOAT UNSIGNED NOT NULL COMMENT 'Kill vs deaths ratio by player / JSON \"kill_death_ratio\"',
  `MaxKillStreak` SMALLINT NOT NULL COMMENT 'Max kills streak made by player before first death or between two deaths / JSON \"kills_streak\"',
  `KillsMin` FLOAT UNSIGNED NOT NULL COMMENT 'Kills made by player per minute / JSON \"kills_per_minute\"',
  `DeathsMin` FLOAT UNSIGNED NOT NULL COMMENT 'NÃºmero de muertas por minuto sufridas por el jugador / JSON \"deaths_per_minute\"',
  `MaxDeathStreak` SMALLINT NOT NULL COMMENT 'Max death streak by player with zero kills made in that life / Mayor racha de muertes sufridas por el jugador sin haber matado enemigos / JSON \"deaths_without_kill_streak\"',
  `MaxTKStreak` SMALLINT NOT NULL COMMENT 'Max team kill streak by player in one life / Mayor racha de bajas de fuego amigo causadas por el jugador sin morir / JSON \"teamkills_streak\"',
  `DeathByTK` SMALLINT NOT NULL COMMENT 'Times the player has been killed by a team member / Bajas de fuego amigo sufridas por el jugador',
  `DeathByTKStreak` SMALLINT NOT NULL COMMENT 'Times the player has been killed by a team member in one life / Bajas de fuego amigo sufridas por el jugador sin haber causado bajas al enemigo',
  `LongestLifeSec` SMALLINT NOT NULL COMMENT 'Longest player life in seconds / Vida mÃ¡s larga del jugador en segundos desde que aparece hasta que es asesinado / JSON \"longest_life_secs\"',
  `ShortestLifeSec` SMALLINT NOT NULL COMMENT 'Shortest player life in seconds / Vida mÃ¡s corta del jugador en segundos desde que aparece hasta que es asesinado / JSON \"shortest_life_secs\"',
  `MatchActiveTimeSec` INT NULL COMMENT 'Sum of seconds active by player (lives) / JSON \"time_seconds\"',
  `Nemesis` TEXT(65447) NULL COMMENT 'JSON field with all deaths by player (player, killer, weapon, num of deaths) / Campo JSON en bruto con los Killers de este jugador',
  `Victims` TEXT(65447) NULL COMMENT 'JSON field with all kills by player (player, victim, weapon, num of kills) / Campo JSON en bruto las vÃ­ctimas de este jugador',
  `PlayerClanTag` VARCHAR(15) NULL COMMENT 'Tag del jugador en esa partida. Guardarlo aquÃ­ evita perder el clan con el que jugÃ³ esta partida si cambia de clan posteriormente',
  `KillsByWeapons` TEXT(65447) NULL COMMENT 'JSON field with all kills by player (player, weapon, num of deaths)  / Campo JSON en bruto con las bajas efectuadas por este jugador con cada arma utilizada',
  `DeathsByWeapons` TEXT(65447) NULL COMMENT 'JSON field with all deaths by player (player, weapon, num of deaths)  / Campo JSON en bruto con las bajas sufridas por este jugador con cada arma utilizada / JSON \"death_by_weapons\"',
  `PlayerClanID` SMALLINT UNSIGNED NULL COMMENT 'Clan del jugador en esa partida. Guardarlo aquÃ­ evita perder el clan con el que jugÃ³ esta partida si cambia de clan posteriormente',
  `PlayerSide` TINYINT UNSIGNED NULL COMMENT '1 allies / 2 axis',
  `CombatPoints` INT UNSIGNED NULL COMMENT 'Combat points the player won in the match',
  `OffensePoints` INT UNSIGNED NULL COMMENT 'Offense points the player won in the match',
  `DefensePoints` INT UNSIGNED NULL COMMENT 'Defense points the player won in the match',
  `SupportPoints` INT UNSIGNED NULL COMMENT 'Support points the player won in the match',
  INDEX `fkPlayerResults_GameMatch_idx` (`MatchID` ASC) VISIBLE,
  PRIMARY KEY (`CMID`, `MatchID`, `Player`),
  INDEX `fkPlayer_DWPlayerID_idx` (`DWPlayerID` ASC) VISIBLE,
  CONSTRAINT `fkPlayerStats_MatchID`
    FOREIGN KEY (`MatchID`)
    REFERENCES `GameMatch` (`MatchID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `fkPlayerStats_DWPlayerID`
    FOREIGN KEY (`DWPlayerID`)
    REFERENCES `Player` (`DWPlayerID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fkPlayerStats_CMID`
    FOREIGN KEY (`CMID`)
    REFERENCES `Community` (`CMID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = INNODB;

create INDEX `ix_PlayerStats_1` USING HASH ON `PlayerStats` (`MatchID`,`Player`,`PlayerSide`,`Deaths`);
create INDEX `ix_PlayerStats_2` USING HASH ON `PlayerStats` (`MatchID`,`Player`,`SteamID`,`PlayerSide`);
create INDEX `ix_PlayerStats_3` USING BTREE ON `PlayerStats` (`MatchID`,`Player`,`Kills`);
create INDEX `ix_PlayerStats_4` USING BTREE ON `PlayerStats` (`MatchID`,`Player`,`Deaths`);
create INDEX `ix_PlayerStats_5` USING HASH ON `PlayerStats` (`MatchID`,`SteamID`);

-- -----------------------------------------------------
-- Table `KillsByPlayer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `KillsByPlayer` (
  `MatchID` INT UNSIGNED NOT NULL COMMENT 'Identificador Ãºnico del partido de estos resultados del jugador',
  `Killer` VARCHAR(50) NOT NULL COMMENT 'Player game nick that has killed the victim / Nombre del jugador en Steam-HLL que ha causado estas bajas a la Victim en este partido',
  `Victim` VARCHAR(50) NOT NULL COMMENT 'Player game nick death by killer / Nombre del jugador en Steam-HLL que ha sufrido muertes por el Killer en ese partido',
  `Kills` SMALLINT UNSIGNED NOT NULL COMMENT 'Num of deaths the killer has killed the victim in this match / NÃºmero de veces que el Killer ha matado a la Victim en este partido',
  INDEX `fkKills_GameMatch_idx` (`MatchID` ASC),
  CONSTRAINT `fkKills_MatchID`
    FOREIGN KEY (`MatchID`)
    REFERENCES `GameMatch` (`MatchID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB;

create INDEX `ix_KillsByPlayer_sqlCheckKillsAndDeathsSumConsistency` USING HASH ON `KillsByPlayer` (`MatchID`);
-- BTree TYPE because of terms max(Kills) that requires order of rows
create INDEX `ix_KillsByPlayer_sqlCheckKillsAndDeathsSumConsistency_2` USING BTREE ON `KillsByPlayer` (`MatchID`,`Kills`);
create INDEX `ix_KillsByPlayer_sqlCheckKillsAndDeathsSumConsistency_3` USING HASH ON `KillsByPlayer` (`MatchID`,`Killer`);
create INDEX `ix_KillsByPlayer_sqlCheckKillsAndDeathsSumConsistency_4` USING HASH ON `KillsByPlayer` (`MatchID`,`Victim`);

-- -----------------------------------------------------
-- Table `DeathsByPlayer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `DeathsByPlayer` (
  `MatchID` INT UNSIGNED NOT NULL COMMENT 'Identificador Ãºnico del partido de estos resultados del jugador',
  `Victim` VARCHAR(50) NOT NULL COMMENT 'Player game nick death by killer / Nombre del jugador en Steam/HLL que ha sufrido muertes en este partido por parte del Killer',
  `Killer` VARCHAR(50) NOT NULL COMMENT 'Player game nick that has killed the victim / Nombre del jugador en Steam/HLL que ha matado a la Victim en este partido',
  `Deaths` SMALLINT UNSIGNED NOT NULL COMMENT 'Num of deaths the killer has killed the victim in this match / NÃºmero de veces que la Victim ha muerto por este Killer en este partido',
  INDEX `fkDeaths_GameMatch_idx` (`MatchID` ASC),
  CONSTRAINT `fkDeaths_MatchID`
    FOREIGN KEY (`MatchID`)
    REFERENCES `GameMatch` (`MatchID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- BTree TYPE because of terms max(Deaths) that requires order of rows
create INDEX `ix_DeathsByPlayer_sqlFillPlayerMatchSide` USING BTREE ON `DeathsByPlayer` (`MatchID`,`Victim`,`Killer`,`Deaths`);
create INDEX `ix_DeathsByPlayer_sqlCheckKillsAndDeathsSumConsistency` USING HASH ON `DeathsByPlayer` (`MatchID`);
-- BTree TYPE because of terms max(Deaths) that requires order of rows
create INDEX `ix_DeathsByPlayer_sqlCheckKillsAndDeathsSumConsistency_2` USING BTREE ON `DeathsByPlayer` (`MatchID`,`Deaths`);
create INDEX `ix_DeathsByPlayer_sqlCheckKillsAndDeathsSumConsistency_3` USING HASH ON `DeathsByPlayer` (`MatchID`,`Killer`);
create INDEX `ix_DeathsByPlayer_sqlCheckKillsAndDeathsSumConsistency_4` USING HASH ON `DeathsByPlayer` (`MatchID`,`Victim`);


-- -----------------------------------------------------
-- Table `WeaponKillsByPlayer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `WeaponKillsByPlayer` (
  `MatchID` INT UNSIGNED NOT NULL COMMENT 'Identificador Ãºnico del partido de estos resultados del jugador',
  `Player` VARCHAR(50) NOT NULL COMMENT 'Player game nick that has win this kills by this weapon / Nombre del jugador en Steam/HLL que ha causado estas bajas enemigas en este partido',
  `Weapon` VARCHAR(500) NOT NULL COMMENT 'Name of weapon / Arma con la que el jugador ha causado las bajas',
  `Kills` SMALLINT UNSIGNED NOT NULL COMMENT 'Num of kills got by player with this weapon in this match / NÃºmero de bajas que el jugador ha causado en este partido con el arma concreta',
  INDEX `fkWeapinKills_GameMatch_idx` (`MatchID` ASC),
  CONSTRAINT `fkWeaponKills_MatchID`
    FOREIGN KEY (`MatchID`)
    REFERENCES `GameMatch` (`MatchID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB;

-- BTree TYPE because of terms max(Kills) that requires order of rows
create INDEX `ix_WeaponKillsByPlayer_sqlCheckNotRegisteredWeapons` USING BTREE ON `WeaponKillsByPlayer` (`MatchID`,`Weapon`,`Player`,`Kills`);
create INDEX `ix_WeaponKillsByPlayer_sqlCheckKillsAndDeathsSumConsistency` USING HASH ON `WeaponKillsByPlayer` (`MatchID`);
create INDEX `ix_WeaponKillsByPlayer_sqlCheckKillsAndDeathsSumConsistency_2` USING HASH ON `WeaponKillsByPlayer` (`MatchID`,`Player`);

-- -----------------------------------------------------
-- Table `PlayerNicks`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `PlayerNicks` (
  `SteamID` VARCHAR(30) NOT NULL,
  `PlayerNick` VARCHAR(50) NOT NULL COMMENT 'Player Steam nick',
  `MainNick` BIT(1) NULL COMMENT '1 = main nick / 0 = secondary nick used in some matches',
  PRIMARY KEY (`SteamID`, `PlayerNick`))
ENGINE = InnoDB;

-- -----------------------------------------------------
-- Table `MatchSquads`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `MatchSquads` (
  `MatchID` INT UNSIGNED NOT NULL,
  `Player` VARCHAR(50) NOT NULL,
  `SteamID` VARCHAR(30) NOT NULL,
  `SquadRole` VARCHAR(50) NOT NULL,
  `PlayerRole` VARCHAR(50) NOT NULL,
  `SquadName` VARCHAR(50) NOT NULL,
  `Side` TINYINT(1) UNSIGNED,
  INDEX `fk_MatchSquads_GameMatch_MatchID_idx` (`MatchID` ASC),
  CONSTRAINT `fk_MatchSquads_GameMatch_MatchID`
    FOREIGN KEY (`MatchID`)
    REFERENCES `GameMatch` (`MatchID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `PlayerHits` >>>>>>>> reserved for future use in logs analyzer
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `PlayerHits` (
  `MatchID` INT UNSIGNED NOT NULL,
  `Player` VARCHAR(50) NOT NULL,
  `Victim` VARCHAR(50) NOT NULL,
  `Weapon` VARCHAR(500) NOT NULL,
  `HitTime` DATETIME NOT NULL,
  `Type` VARCHAR(50) NULL,
  PRIMARY KEY (`MatchID`),
  UNIQUE INDEX `idx_MatchSquads_1` (`MatchID` ASC, `Player` ASC),
  CONSTRAINT `fk_PlayerHits_GameMatch`
    FOREIGN KEY (`MatchID`)
    REFERENCES `GameMatch` (`MatchID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `WeaponDeathsByPlayer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `WeaponDeathsByPlayer` (
  `MatchID` INT UNSIGNED NOT NULL,
  `Player` VARCHAR(50) NOT NULL COMMENT 'Player game nick that has been killed by this weapon / Nombre del jugador en Steam/HLL que ha muerto por esa arma',
  `Weapon` VARCHAR(500) NOT NULL COMMENT 'Name of weapon / Arma con la que el jugador ha muerto',
  `Deaths` SMALLINT UNSIGNED NOT NULL COMMENT 'Num of deaths got by player with this weapon in this match / NÃºmero de bajas que el jugador ha sufrido en este partido con el arma concreta',
  INDEX `fkWeaponDeathsByPlayer_MatchID_idx` (`MatchID` ASC),
  CONSTRAINT `fkWeaponDeathsByPlayer_MatchID`
    FOREIGN KEY (`MatchID`)
    REFERENCES `GameMatch` (`MatchID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- BTree TYPE because of terms max(Deaths) that requires order of rows
create INDEX `ix_WeaponDeathsByPlayer_1` USING BTREE ON `WeaponDeathsByPlayer` (`MatchID`,`Weapon`,`Player`,`Deaths`);

-- -----------------------------------------------------
-- Table `MatchStreamers`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `MatchStreamers` (
  `MatchID` INT UNSIGNED NOT NULL,
  `SteamID` VARCHAR(30) NOT NULL,
  `Side` TINYINT UNSIGNED NOT NULL COMMENT '1 Allies; 2 Axis; 0 both',
  `CastURL` VARCHAR(2048) NULL,
  PRIMARY KEY (`MatchID`, `SteamID`),
  CONSTRAINT `fk_MatchStreamers_MatchID`
    FOREIGN KEY (`MatchID`)
    REFERENCES `GameMatch` (`MatchID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = INNODB;

-- -----------------------------------------------------
-- Table `hll_log`
-- -----------------------------------------------------

create TABLE IF NOT EXISTS `hll_log` (
	`ts` datetime,
	`tlog` TEXT
)

-- *****************************************************************************************************************************
-- DB Procedures
-- *****************************************************************************************************************************

DROP PROCEDURE if EXISTS `proc_InsertPlayerStats`;
delimiter $$
CREATE PROCEDURE `proc_InsertPlayerStats` (IN vLog TINYINT, IN vSQL TEXT)

BEGIN
	
	IF vLog=1 THEN
		INSERT INTO hll_log (ts,tlog) VALUES (current_timestamp(),concat('proc_InsertPlayerStats: ',vSQL));
	END IF;

	PREPARE S1 FROM vSQL;
	EXECUTE S1;
	
END; $$

delimiter ;


-- *****************************************************************************************************************************

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
